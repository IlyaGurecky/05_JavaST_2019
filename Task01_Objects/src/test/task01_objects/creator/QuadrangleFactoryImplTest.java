package test.task01_objects.creator;import by.guretsky.task01_objects.entity.Point;import by.guretsky.task01_objects.entity.Quadrangle;import by.guretsky.task01_objects.exception.IncorrectQuadranglePointsException;import by.guretsky.task01_objects.factory.QuadrangleFactoryImpl;import org.testng.Assert;import org.testng.annotations.Test;import java.util.*;@SuppressWarnings("CheckStyle")public class QuadrangleFactoryImplTest {    private final QuadrangleFactoryImpl creator = new QuadrangleFactoryImpl();    @Test(description = "Positive script for the creator")    public void testCreateQuadrangle1() throws            IncorrectQuadranglePointsException {        List<Point> points = new ArrayList<>(Arrays                .asList(new Point(-2.0, 0.0),                        new Point(0.0, 1.0),                        new Point(1.0, 3.0),                        new Point(4.0, 0.0)));        Quadrangle actualQuadrangle = creator.createQuadrangle(points);        Quadrangle expectedQuadrangle = new Quadrangle(points);        Assert.assertEquals(actualQuadrangle, expectedQuadrangle);    }    @Test(expectedExceptions = IncorrectQuadranglePointsException.class,            description = "Negative script for the creator")    public void testCreateQuadrangle2() throws            IncorrectQuadranglePointsException {        List<Point> points = new ArrayList<>(Arrays                .asList(new Point(-1.0, 0.0),                        new Point(0.0, 1.0),                        new Point(1.0, 2.0),                        new Point(2.0, 0.0)));        Quadrangle actualQuadrangle = creator.createQuadrangle(points);        Quadrangle expectedQuadrangle = new Quadrangle(new ArrayList<>());        Assert.assertEquals(actualQuadrangle, expectedQuadrangle);    }    @Test(description = "Positive script for the creator")    public void testCreateQuadrangleList1() throws            IncorrectQuadranglePointsException {        List<Point> pointList1 = new ArrayList<>(Arrays                .asList(new Point(1.0, 2.0),                        new Point(-3.0, 3.0),                        new Point(-3.0, -4.0),                        new Point(5.0, -3.0)));        List<Point> pointList2 = new ArrayList<>(Arrays                .asList(new Point(1.0, 2.0),                        new Point(-3.0, 3.0),                        new Point(-1.0, -1.0),                        new Point(1.0, -1.0)));        Map<Integer, List<Double>> coordinates = new HashMap<>();        coordinates.put(1, new ArrayList<>(Arrays.asList(1.0, 2.0, -3.0, 3.0,                -3.0, -4.0, 5.0, -3.0)));        coordinates.put(2, new ArrayList<>(Arrays.asList(1.0, 2.0, -3.0, 3.0,                -1.0, -1.0, 1.0, -1.0)));        List<Quadrangle> actualQuadranglesList = creator                .createQuadranglesList(coordinates);        List<Quadrangle> expectedQuadranglesList = new ArrayList<>(Arrays                .asList(new Quadrangle(pointList1),                        new Quadrangle(pointList2)));        Assert.assertEquals(actualQuadranglesList, expectedQuadranglesList);    }    @Test(description = "Negative script for the creator")    public void testCreateQuadrangleList2() throws            IncorrectQuadranglePointsException {        List<Point> pointList1 = new ArrayList<>(Arrays                .asList(new Point(1.0, 2.0),                        new Point(-3.0, 3.0),                        new Point(-3.0, -4.0),                        new Point(5.0, -3.0)));        List<Point> pointList2 = new ArrayList<>(Arrays                .asList(new Point(-3.0, 1.0),                        new Point(-2.0, 1.0),                        new Point(4.0, 1.0),                        new Point(1.0, -1.0)));        List<Quadrangle> expectedList = new ArrayList<>(Arrays                .asList(new Quadrangle(pointList1),new Quadrangle(pointList2)));        Map<Integer, List<Double>> coordinates = new HashMap<>();        coordinates.put(1, new ArrayList<>(Arrays.asList(1.0, 2.0, -3.0, 3.0,                -3.0, -4.0, 5.0, -3.0)));        coordinates.put(2, new ArrayList<>(Arrays.asList(-3.0, 1.0, -2.0, 1.0,                4.0, 1.0, 1.0, -1.0)));        List<Quadrangle> actualList = creator                .createQuadranglesList(coordinates);        Assert.assertEquals(actualList, expectedList);    }}